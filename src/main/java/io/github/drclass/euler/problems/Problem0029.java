package io.github.drclass.euler.problems;

import java.math.BigInteger;
import java.util.HashSet;
import java.util.Set;

import io.github.drclass.euler.api.Problem;
import io.github.drclass.euler.api.Result;

/**
 * Consider all integer combinations of <b><i>a<sup>b</sup></i></b> for <b>2</b>
 * &lt;= <b><i>a</i></b> &lt;= <b>5</b> and <b>2</b> &lt;= <b><i>b</i></b> &lt;=
 * <b>5</b>:<br>
 * <table>
 * <tr>
 * <td><b>2<sup>2</sup></b> = <b>4</b>,</td>
 * <td><b>2<sup>3</sup></b> = <b>8</b>,</td>
 * <td><b>2<sup>4</sup></b> = <b>16</b>,</td>
 * <td><b>2<sup>5</sup></b> = <b>32</b></td>
 * </tr>
 * <tr>
 * <td><b>3<sup>2</sup></b> = <b>9</b>,</td>
 * <td><b>3<sup>3</sup></b> = <b>27</b>,</td>
 * <td><b>3<sup>4</sup></b> = <b>81</b>,</td>
 * <td><b>3<sup>5</sup></b> = <b>243</b></td>
 * </tr>
 * <tr>
 * <td><b>4<sup>2</sup></b> = <b>16</b>,</td>
 * <td><b>4<sup>3</sup></b> = <b>64</b>,</td>
 * <td><b>4<sup>4</sup></b> = <b>256</b>,</td>
 * <td><b>4<sup>5</sup></b> = <b>1024</b></td>
 * </tr>
 * <tr>
 * <td><b>5<sup>2</sup></b> = <b>25</b>,</td>
 * <td><b>5<sup>3</sup></b> = <b>125</b>,</td>
 * <td><b>5<sup>4</sup></b> = <b>625</b>,</td>
 * <td><b>5<sup>5</sup></b> = <b>3125</b></td>
 * </tr>
 * </table>
 * <p>
 * If they are then placed in numerical order, with any repeats removed, we get
 * the following sequence of <b>15</b> distinct terms:<br>
 * <b>4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125</b>
 * <p>
 * How many distinct terms are in the sequence generated by
 * <b><i>a<sup>b</sup></i></b> for <b>2</b> &lt;= <b><i>a</i></b> &lt;=
 * <b>100</b> and <b>2</b> &lt;= <b><i>b</i></b> &lt;= <b>100</b>?
 */
public class Problem0029 implements Problem {
	public Result<?> solve() {
		Set<BigInteger> powers = new HashSet<>();
		for (int a = 2; a <= 100; ++a) {
			for (int b = 2; b <= 100; ++b) {
				powers.add(BigInteger.valueOf(a).pow(b));
			}
		}
		return new Result<>(powers.size());
	}
}
