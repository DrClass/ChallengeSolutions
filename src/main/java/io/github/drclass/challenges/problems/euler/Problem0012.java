package io.github.drclass.challenges.problems.euler;

import io.github.drclass.challenges.api.Problem;
import io.github.drclass.challenges.api.Result;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:<br>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...<br>
 * Let us list the factors of the first seven triangle numbers:<br>
 * <b> 1:</b> 1<br>
 * <b> 3:</b> 1,3<br>
 * <b> 6:</b> 1,2,3,6<br>
 * <b>10:</b> 1,2,5,10<br>
 * <b>15:</b> 1,3,5,15<br>
 * <b>21:</b> 1,3,7,21<br>
 * <b>28:</b> 1,2,4,7,14,28<br>
 * We can see that 28 is the first triangle number to have over five
 * divisors.<br>
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */
public class Problem0012 implements Problem {
	public Result<?> solve() {
		int num = 1;
		int triangle = num;
		while (true) {
			num++;
			triangle += num;
			int maxD = (int) Math.sqrt(triangle);
			int total = 1;
			for (int i = 2; i <= maxD; i++) {
				if (triangle % i == 0) {
					total++;
					int d = triangle / i;
					if (d != i) {
						total++;
					}
				}
			}
			if (total > 500) {
				return new Result<>(triangle);
			}
		}
	}
}
